/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.ktor.web.plugins

import io.ktor.web.plugins.pages.*
import java.io.*
import kotlin.system.*

class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}

fun main(args: Array<String>) {
    val configDir = File("plugins.d")

    val (model, validationResult) = collectModel(configDir)
    val (allPlugins, featuedPlugins) = model

    validationResult.collected.filter { !it.isError }.forEach { warning ->
        println("[WARNING][${warning.descriptor.id}][${warning.descriptor.filePath}] ${warning.text}")
    }

    validationResult.collected.filter { it.isError }.forEach { warning ->
        println("[ERROR][${warning.descriptor.id}][${warning.descriptor.filePath}] ${warning.text}")
    }

    if (validationResult.hasErrors) {
        println("[ERROR] There were errors. Aborting.")
        exitProcess(1)
    }

    if (allPlugins.isEmpty()) {
        println("[ERROR] No input files found in plugins.d directory. Aborting.")
        exitProcess(1)
    }

    val docRoot = File("docs")

    val generated = HashSet<String>()

    allPlugins
//        .filter { it.filePath != "example.json" }
        .forEach { plugin ->

            println("Generating ${plugin.id}")

            val page = buildPluginPage(plugin)

            val fileName = WebSite.pluginPage(plugin).removePrefix("/")

            check(generated.add(fileName)) { "File $fileName is already generated." }

            val pluginPageFile = File(fileName)
            pluginPageFile.parentFile.mkdirs()
            pluginPageFile.writeText(page)
        }

    File(docRoot, WebSite.mainPage().removePrefix("/")).writeText(buildMainPage(model))

    println("Done.")
}
